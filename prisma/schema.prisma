generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Rating {
  s
  t
  m
  e
}

model Post {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  content     String?  @db.LongText
  title       String
  description String?  @db.Text
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  rating      Rating   @default(s)

  author      AuthUser @relation(fields: [authorId], references: [id])
  authorId    String

  @@map("posts")
  @@index([authorId])
}

// model Tag {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String   @unique

//   @@map("tags")
// }

model AuthUser {
  id           String        @id @unique @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  username     String        @unique
  displayName  String?
  bio          String?

  auth_session AuthSession[]
  auth_key     AuthKey[]
  posts        Post[]

  @@map("auth_users")
}

model AuthSession {
  id             String   @id @unique @default(uuid())
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_sessions")
}

model AuthKey {
  id              String   @id @unique @default(uuid())
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_keys")
}
