generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum AgeRating {
  s
  t
  m
  x
}

enum Role {
  user
  admin
}

model Post {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  content     String?   @db.LongText
  title       String
  description String?   @db.Text
  published   Boolean   @default(false)
  featured    Boolean   @default(false)
  rating      AgeRating @default(s)

  bookmarks   Bookmark[]
  comments    Comment[]
  tags        Tag[]
  scores      Score[]

  author      AuthUser @relation(fields: [authorId], references: [id])
  authorId    String

  @@index([authorId])
  @@map("posts")
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String @unique
  posts     Post[]

  @@map("tags")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post   @relation(fields: [postId], references: [id])
  postId    String

  user      AuthUser @relation(fields: [userId], references: [id])
  userId    String

  @@unique([postId, userId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content   String? @db.Text

  post      Post   @relation(fields: [postId], references: [id])
  postId    String

  user      AuthUser @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
  @@index([postId])
}

model Score {
  id        String  @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post   @relation(fields: [postId], references: [id])
  postId    String

  user      AuthUser @relation(fields: [userId], references: [id])
  userId    String

  value     Int

  @@unique([postId, userId])
  @@index([userId])
}

model AuthUser {
  id           String   @id @unique @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  email        String  @unique
  username     String  @unique
  displayName  String? @unique
  bio          String? @db.Text

  role         Role    @default(user)

  bookmarks    Bookmark[]
  comments     Comment[]
  scores       Score[]

  auth_session AuthSession[]
  auth_key     AuthKey[]
  posts        Post[]

  @@map("auth_users")
}

model AuthSession {
  id             String   @id @unique @default(uuid())
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_sessions")
}

model AuthKey {
  id              String   @id @unique @default(uuid())
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_keys")
}
